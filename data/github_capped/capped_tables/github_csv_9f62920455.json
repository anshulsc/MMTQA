{
  "columns": [
    "create cctbx conda environment",
    "conda create -n cctbx312 -c conda-forge cctbx-base python=3.12"
  ],
  "data": [
    [
      "create cctbx conda kernel",
      "conda activate cctbx312 && python -m ipykernel install --user --name cctbx312 --display-name 'cctbx 3.12'"
    ],
    [
      "read mtz file into a miller array",
      "<case:lower> from iotbx.reflection_file_reader import any_reflection_file\nhkl_file = any_reflection_file('${1:3hz7.mtz}')\nmiller_arrays = hkl_file.as_miller_arrays(merge_equivalents=False)"
    ],
    [
      "print labels of miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().labels)) for i, miller_array in list(enumerate(miller_arrays))[:2]]"
    ],
    [
      "print wavelength of each miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().wavelength)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print source of each miller array",
      "<case:lower> print('Miller Array %s: %s' % (i, miller_array.info().source)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print number of datasets in miller array",
      "<case:lower> len(miller_arrays)"
    ],
    [
      "print symmetry of each miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().crystal_symmetry_from_file)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print miller indices for a given miller array",
      "<case:lower> [print(hkl) for hkl in miller_arrays[${1:0}].indices()]"
    ],
    [
      "print the available methods for the Miller class.",
      "<case:lower> dir(miller_arrays[${1:0}])"
    ],
    [
      "print  the resolution range in d star in a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].min_max_d_star_sq()"
    ],
    [
      "print  the resolution range in Angstroms for a Miller array",
      "<case:lower> miller_arrays[${1:0}].d_max_min()"
    ]
  ]
}