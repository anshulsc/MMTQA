{
  "columns": [
    "create cctbx conda environment",
    "conda create -n cctbx312 -c conda-forge cctbx-base python=3.12"
  ],
  "data": [
    [
      "create cctbx conda kernel",
      "conda activate cctbx312 && python -m ipykernel install --user --name cctbx312 --display-name 'cctbx 3.12'"
    ],
    [
      "read mtz file into a miller array",
      "<case:lower> from iotbx.reflection_file_reader import any_reflection_file\nhkl_file = any_reflection_file('${1:3hz7.mtz}')\nmiller_arrays = hkl_file.as_miller_arrays(merge_equivalents=False)"
    ],
    [
      "print labels of miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().labels)) for i, miller_array in list(enumerate(miller_arrays))[:2]]"
    ],
    [
      "print wavelength of each miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().wavelength)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print source of each miller array",
      "<case:lower> print('Miller Array %s: %s' % (i, miller_array.info().source)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print number of datasets in miller array",
      "<case:lower> len(miller_arrays)"
    ],
    [
      "print symmetry of each miller array",
      "<case:lower> [print('Miller Array %s: %s' % (i, miller_array.info().crystal_symmetry_from_file)) for i, miller_array in list(enumerate(miller_arrays))]"
    ],
    [
      "print miller indices for a given miller array",
      "<case:lower> [print(hkl) for hkl in miller_arrays[${1:0}].indices()]"
    ],
    [
      "print the available methods for the Miller class.",
      "<case:lower> dir(miller_arrays[${1:0}])"
    ],
    [
      "print  the resolution range in d star in a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].min_max_d_star_sq()"
    ],
    [
      "print  the resolution range in Angstroms for a Miller array",
      "<case:lower> miller_arrays[${1:0}].d_max_min()"
    ],
    [
      "print  the I/sig overall for a given Miller array",
      "<case:lower> miller_arrays[${1:0}].i_over_sig_i()"
    ],
    [
      "print  CC one-half sigma tau for a given Miller array",
      "<case:lower> miller_arrays[${1:0}].cc_one_half_sigma_tau()"
    ],
    [
      "print CC one-half for a given Miller array",
      "<case:lower> miller_arrays[${1:0}].cc_one_half()"
    ],
    [
      "print the Bijvoet ratios in a specified Miller array",
      "<case:lower> [print(i) for i in miller_arrays[${1:0}].bijvoet_ratios()]"
    ],
    [
      "Return the `measurability` of the anomalous signal in a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].measurability()"
    ],
    [
      "Return the anomalous signal in a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].anomalous_signal()"
    ],
    [
      "Show comprehensive summary for a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].show_comprehensive_summary()"
    ],
    [
      "Show number of bijvoet pairs for a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].n_bijvoet_pairs()"
    ],
    [
      "Show wilson ratio of miller array for a specified Miller array",
      "<case:lower> miller_arrays[${1:0}].wilson_ratio()"
    ],
    [
      "Unpack anomalous pairs for a specified Miller array",
      "<case:lower> Iobs = miller_arrays[${1:0}]\ni_plus, i_minus = Iobs.hemispheres_acentrics()\nipd = i_plus.data()\nip=list(ipd)\nimd = i_minus.data()\nim = list(imd)\nlen(im)\nIobs.show_summary()\nprint(Iobs.info())\nprint(Iobs.observation_type())"
    ],
    [
      "insert anomalous pair plot",
      "%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.ticker as ticker\nfrom matplotlib.ticker import MultipleLocator #, FormatStrFormatter\nfrom matplotlib.ticker import FuncFormatter\nfrom iotbx.reflection_file_reader import any_reflection_file\n# >>> change the mtz file name\nhkl_file = any_reflection_file('3hz7.mtz')\nmiller_arrays = hkl_file.as_miller_arrays(merge_equivalents=False)\nIobs = miller_arrays[1]\ni_plus, i_minus = Iobs.hemispheres_acentrics()\nipd = i_plus.data()\nip=list(ipd)\nimd = i_minus.data()\nim = list(imd)\nlen(im)\n\nprint('Number of anomalous pairs: ', miller_arrays[0].n_bijvoet_pairs())\n\ncomma_fmt = FuncFormatter(lambda x, p: format(int(x), ','))\n\nmpl.rcParams['savefig.dpi'] = 600\nmpl.rcParams['figure.dpi'] = 600\n\n# Set to width of a one column on a two-column page.\n# May want to adjust settings for a slide.\nfig, ax = plt.subplots(figsize=[3.25, 3.25])\nax.scatter(ip,im,c='k',alpha=0.3,s=5.5)\nax.set_xlabel(r'I(+)',fontsize=12)\nax.set_ylabel(r'I(-)',fontsize=12)\nax.xaxis.set_major_locator(MultipleLocator(50000.))\nax.yaxis.set_major_locator(MultipleLocator(50000.))\nax.get_xaxis().set_major_formatter(comma_fmt)\nax.get_yaxis().set_major_formatter(comma_fmt)\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nax.grid(False)\n\n# >>> change name of the figure file\nplt.savefig('3hz7IpIm.pdf',bbox_inches='tight')"
    ],
    [
      "print five rows of Iobs",
      "list(Iobs[${1:100:105}])"
    ],
    [
      "extract the intensities for a Miller array and print ten rows",
      "Iobs = miller_arrays[${1:0}]\niobsdata = Iobs.data()\nlist(iobsdata[${1:100:110}])"
    ],
    [
      "print all of the intensities for a given Miller array",
      "<case:lower> [print(hkl) for hkl in miller_arrays[1].data()]"
    ],
    [
      "write miller array as a mtz file.",
      "# Convert the miller array into a mtz_dataset and write out as a mtz file.\nmtz_dataset = Iobs.as_mtz_dataset(column_root_label='${1:I}')\nmtz_dataset.mtz_object().write('${2:3hz7intensities}.mtz')"
    ],
    [
      "read mtz file and print column labels",
      "<case:lower> mtz_filename2 = '${1:3hz7intensities}.mtz'\nmtz_file2 = mtz.object(mtz_filename2)\nmtz_file2.column_labels()"
    ],
    [
      "convert arrays to dictionaries",
      "<case:lower> from iotbx import mtz\nmtz_obj = mtz.object(file_name='${1:3nd4}.mtz')\n# Only works with mtz.object. \n# Does not work if mtz is read in with iotbx.file_reader.\nmiller_arrays_dict = mtz_obj.as_miller_arrays_dict()"
    ],
    [
      "Print the keys() of a miller dictionary.",
      "miller_arrays_dict.keys()"
    ],
    [
      "Print the column labels of Miller dictionary.",
      "<case:lower> from iotbx import mtz\nmtz_obj = mtz.object(file_name='${1:/Users/blaine/3nd4.mtz}')\n# Only works with mtz.object. Does not work if mtz is read in with iotbx.file_reader.\nmiller_arrays_dict = mtz_obj.as_miller_arrays_dict()\n[print(f'Column label: {key[2]}')  for key in miller_arrays_dict.keys()]"
    ],
    [
      "generate the indices of given unit cell ",
      "from cctbx import miller\nimport cctbx\nfrom cctbx import crystal\nms = miller.build_set(\n    crystal_symmetry=crystal.symmetry(\n        space_group_symbol='${1:Fd-3m}',\n        unit_cell=(${2:5.4307,5.4307,5.4307,90.00,90.0,90.00})),\n    anomalous_flag=${3:True},\n    d_min=${4:0.4})\n[print(hkl) for hkl in ms.indices()]"
    ],
    [
      "generate reflections",
      "<case:lower> from cctbx import miller\nimport cctbx\nfrom cctbx import crystal\n\nms = miller.build_set(\n    crystal_symmetry=crystal.symmetry(\n        space_group_symbol='${1:Fd-3m}',\n        unit_cell=(${2:5.4307,5.4307,5.4307,90.00,90.0,90.00})),\n    anomalous_flag=${3:True},\n    d_min=${4:0.4})\n\nmsu = ms.map_to_asu()\n[print(hkl2) for hkl2 in msu.indices()]"
    ],
    [
      "print summary of mtz file after reading into miller array",
      "<case:lower> from iotbx.reflection_file_reader import any_reflection_file\nhkl_in = any_reflection_file(file_name='${1:3nd4}.mtz')\nmiller_arrays = hkl_in.as_miller_arrays()\nf_obs = miller_arrays[0]\nf_obs.show_summary()"
    ],
    [
      "print summary of mtz file after reading a mtz object",
      "<case:lower> from iotbx import mtz\nmtz_obj = mtz.object(file_name='/Users/blaine/${1:3nd4}.mtz')\nmtz_obj.show_summary()"
    ],
    [
      "read mtz file into a Miller array",
      "<case:lower> from iotbx import mtz\nmtz_obj = mtz.object(file_name='${1:3nd4}.mtz')\nmiller_arrays = mtz_obj.as_miller_arrays()"
    ],
    [
      "read mtz file into a Miller array and truncate and print summary",
      "<case:lower> from iotbx import mtz\nmtz_obj = mtz.object(file_name='3nd4.mtz')\nmiller_arrays = mtz_obj.as_miller_arrays()\nmiller_array_truncated = miller_arrays[0].resolution_filter(d_min=2, d_max=5)\nprint(miller_array_truncated)\nmiller_array_truncated.show_summary()"
    ]
  ]
}